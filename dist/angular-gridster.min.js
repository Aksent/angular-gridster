"use strict";angular.module("gridster",[]).controller("GridsterCtrl",function(){function deepExtend(destination,source){for(var property in source)source[property]&&source[property].constructor&&source[property].constructor===Object?(destination[property]=destination[property]||{},deepExtend(destination[property],source[property])):source[property]&&source[property].constructor&&source[property].constructor===Array?(destination[property]=destination[property]||[],deepExtend(destination[property],source[property])):destination[property]=source[property];return destination}return{grid:[],$preview:null,$element:null,opts:{colWidth:"auto",rowHeight:"match",minColumns:1,minRows:1,columns:6,margins:[10,10],defaultSizeX:2,defaultSizeY:1,minGridRows:2,maxGridRows:100,mobileBreakPoint:600,resizable:{enabled:!0},draggable:{enabled:!0}},width:1e3,columns:5,colWidth:"auto",rowHeight:"match",gridHeight:2,maxGridRows:100,margins:[10,10],isMobile:!1,init:function($element,$preview){this.$element=$element,this.$preview=$preview},setMargins:function(margins){this.margins=margins},getColumns:function(){return this.columns},getMinColumns:function(){return this.minColumns},getMaxColumns:function(){return this.maxColumns},getMinRows:function(){return this.minRows},getMaxRows:function(){return this.maxRows},setInteger:function(prop,value){value&&(value=parseInt(value,10),isNaN(value)||(this[prop]=value))},setFloat:function(prop,value){value&&(value=parseFloat(value,10),isNaN(value)||(this[prop]=value))},setColumns:function(columns){this.setInteger("columns",columns)},setMinColumns:function(minColumns){this.setInteger("minColumns",minColumns)},setMaxColumns:function(maxColumns){this.setInteger("maxColumns",maxColumns)},setMinRows:function(minRows){this.setInteger("minRows",minRows)},setMaxRows:function(maxRows){this.setInteger("maxRows",maxRows)},setWidth:function(pixels){this.setFloat("width",pixels)},setColWidth:function(pixels){"auto"===pixels?this.colWidth=(this.width-this.margins[1])/this.columns:this.setFloat("colWidth",pixels)},setRowHeight:function(pixels){"match"===pixels?this.rowHeight=this.colWidth:this.setFloat("rowHeight",pixels)},setMaxGridRows:function(rows){this.setInteger("maxGridRows",rows)},getRowHeight:function(){return this.rowHeight},destroy:function(){this.opts=this.margins=this.grid=this.$element=this.$preview=null},setOpts:function(opts){opts&&deepExtend(this.opts,opts),this.opts.margins&&(this.margins=this.opts.margins),this.opts.columns&&this.setColumns(this.opts.columns),this.opts.minColumns&&this.setMinColumns(this.opts.minColumns),this.opts.maxColumns&&this.setMaxColumns(this.opts.maxColumns),this.opts.minRows&&this.setMinRows(this.opts.minRows),this.opts.maxRows&&this.setMaxRows(this.opts.maxRows),this.opts.width?this.setWidth(this.opts.width):this.$element&&this.setWidth(this.$element.width()),this.opts.colWidth&&this.setColWidth(this.opts.colWidth),this.opts.rowHeight&&this.setRowHeight(this.opts.rowHeight),this.opts.maxGridRows&&this.setMaxGridRows(this.opts.maxGridRows)},redraw:function(){this.setOpts(),this.isMobile=this.width<=this.opts.mobileBreakPoint;for(var rowIndex=0,l=this.grid.length;l>rowIndex;++rowIndex){var columns=this.grid[rowIndex];if(columns)for(var colIndex=0,len=columns.length;len>colIndex;++colIndex)if(columns[colIndex]){var item=columns[colIndex],$el=item.$element;this.setElementPosition($el,item.row,item.col),this.setElementSizeY($el,item.sizeY),this.setElementSizeX($el,item.sizeX)}}},canItemOccupy:function(item,row,column){return row>-1&&column>-1&&item.sizeX+column<=this.columns},autoSetItemPosition:function(item){for(var rowIndex=0;rowIndex<this.maxGridRows;++rowIndex)for(var colIndex=0;colIndex<this.columns;++colIndex){var occupied=this.getItem(rowIndex,colIndex),canFit=this.canItemOccupy(item,rowIndex,colIndex);if(!occupied&&canFit)return void this.putItem(item,rowIndex,colIndex)}throw new Error("Unable to place item!")},getItems:function(row,column,sizeX,sizeY,excludeItems){var items=[];sizeX&&sizeY||(sizeX=sizeY=1),!excludeItems||excludeItems instanceof Array||(excludeItems=[excludeItems]);for(var h=0;sizeY>h;++h)for(var w=0;sizeX>w;++w){var item=this.getItem(row+h,column+w,excludeItems);!item||excludeItems&&-1!==excludeItems.indexOf(item)||-1!==items.indexOf(item)||items.push(item)}return items},removeItem:function(item){for(var rowIndex=0,l=this.grid.length;l>rowIndex;++rowIndex){var columns=this.grid[rowIndex];if(columns){var index=columns.indexOf(item);if(-1!==index){columns[index]=null;break}}}this.floatItemsUp(),this.updateHeight()},getItem:function(row,column,excludeItems){!excludeItems||excludeItems instanceof Array||(excludeItems=[excludeItems]);for(var sizeY=1;row>-1;){for(var sizeX=1,col=column;col>-1;){var items=this.grid[row];if(items){var item=items[col];if(item&&(!excludeItems||-1===excludeItems.indexOf(item))&&item.sizeX>=sizeX&&item.sizeY>=sizeY)return item}++sizeX,--col}--row,++sizeY}return null},putItems:function(items){for(var i=0,l=items.length;l>i;++i)this.putItem(items[i])},putItem:function(item,row,column){if(("undefined"==typeof row||null===row)&&(row=item.row,column=item.col,"undefined"==typeof row||null===row))return void this.autoSetItemPosition(item);if(this.canItemOccupy(item,row,column)||(column=Math.min(this.columns-item.sizeX,Math.max(0,column)),row=Math.max(0,row)),item&&null!==item.oldRow&&"undefined"!=typeof item.oldRow){if(item.oldRow===row&&item.oldColumn===column)return item.row=row,void(item.col=column);var oldRow=this.grid[item.oldRow];oldRow&&oldRow[item.oldColumn]===item&&delete oldRow[item.oldColumn]}item.oldRow=item.row=row,item.oldColumn=item.col=column,this.moveOverlappingItems(item),this.grid[row]||(this.grid[row]=[]),this.grid[row][column]=item},moveOverlappingItems:function(item){var items=this.getItems(item.row,item.col,item.sizeX,item.sizeY,item);this.moveItemsDown(items,item.row+item.sizeY)},moveItemsDown:function(items,toRow){if(items&&0!==items.length){var item,i,l,topRows={};for(i=0,l=items.length;l>i;++i){item=items[i];var topRow=topRows[item.col];("undefined"==typeof topRow||item.row<topRow)&&(topRows[item.col]=item.row)}for(i=0,l=items.length;l>i;++i){item=items[i];var columnOffset=toRow-topRows[item.col];this.putItem(item,item.row+columnOffset,item.col)}}},floatItemsUp:function(){for(var rowIndex=0,l=this.grid.length;l>rowIndex;++rowIndex){var columns=this.grid[rowIndex];if(columns)for(var colIndex=0,len=columns.length;len>colIndex;++colIndex)columns[colIndex]&&this.floatItemUp(columns[colIndex])}},floatItemUp:function(item){for(var colIndex=item.col,sizeY=item.sizeY,sizeX=item.sizeX,bestRow=null,bestColumn=null,rowIndex=item.row-1;rowIndex>-1;){var items=this.getItems(rowIndex,colIndex,sizeX,sizeY,item);if(0!==items.length)break;bestRow=rowIndex,bestColumn=colIndex,--rowIndex}null!==bestRow&&this.putItem(item,bestRow,bestColumn)},updateHeight:function(plus){var maxHeight=this.opts.minGridRows;plus||(plus=0);for(var rowIndex=this.grid.length;rowIndex>=0;--rowIndex){var columns=this.grid[rowIndex];if(columns)for(var colIndex=0,len=columns.length;len>colIndex;++colIndex)columns[colIndex]&&(maxHeight=Math.max(maxHeight,rowIndex+plus+columns[colIndex].sizeY))}this.gridHeight=Math.min(this.maxGridRows,maxHeight)},pixelsToRows:function(pixels,ceilOrFloor){return ceilOrFloor===!0?Math.ceil(pixels/this.rowHeight):ceilOrFloor===!1?Math.floor(pixels/this.rowHeight):Math.round(pixels/this.rowHeight)},pixelsToColumns:function(pixels,ceilOrFloor){return ceilOrFloor===!0?Math.ceil(pixels/this.colWidth):ceilOrFloor===!1?Math.floor(pixels/this.colWidth):Math.round(pixels/this.colWidth)},setElementPosition:function($el,row,column){$el.css(this.isMobile?{margin:this.margins[0]+"px",top:"auto",left:"auto"}:{margin:0,top:row*this.rowHeight+this.margins[0],left:column*this.colWidth+this.margins[1]})},setElementSizeY:function($el,rows){this.isMobile?$el.css("height","auto"):$el.css("height",rows*this.rowHeight-this.margins[0]+"px")},setElementSizeX:function($el,columns){this.isMobile?$el.css("width","auto"):$el.css("width",columns*this.colWidth-this.margins[1]+"px")}}}).directive("gridster",["$parse","$timeout",function($parse,$timeout){return{restrict:"EAC",controller:"GridsterCtrl",compile:function(){return{pre:function(scope,$elem,attrs,controller){var updateHeight=function(){controller.$element.css("height",controller.gridHeight*controller.rowHeight+controller.margins[0]+"px")},optsKey=attrs.gridster,opts={};if(optsKey){var optsGetter=$parse(optsKey);opts=optsGetter(scope),scope.$watch(optsKey,function(newOpts,oldOpts){newOpts!==oldOpts&&(controller.setOpts(newOpts),"undefined"!=typeof newOpts.draggable&&"undefined"!=typeof oldOpts.draggable&&newOpts.draggable!==oldOpts.draggable&&scope.$broadcast("draggable-changed",newOpts.draggable),"undefined"!=typeof newOpts.resizable&&"undefined"!=typeof oldOpts.resizable&&newOpts.resizable!==oldOpts.resizable&&scope.$broadcast("resizable-changed",newOpts.resizable),controller.redraw(),updateHeight())},!0)}controller.setOpts(opts)},post:function(scope,$elem,attrs,controller){function updateHeight(){controller.$element.css("height",controller.gridHeight*controller.rowHeight+controller.margins[0]+"px")}function resize(){var width=$elem.width();width===prevWidth||$elem.find(".gridster-item-moving").length>0||(prevWidth=width,$elem.removeClass("gridster-loaded"),controller.redraw(),updateHeight(),scope.$broadcast("gridster-resized",[width,$elem.height()]),$elem.addClass("gridster-loaded"))}$elem.addClass("gridster"),$elem.removeClass("gridster-loaded");var $preview=angular.element('<div class="gridster-item gridster-preview-holder"></div>').appendTo($elem);scope.$watch(function(){return controller.gridHeight},updateHeight),scope.$watch(function(){return controller.isMobile},function(isMobile){isMobile?controller.$element.addClass("gridster-mobile"):controller.$element.removeClass("gridster-mobile")});var prevWidth=$elem.width();angular.element(window).on("resize",function(){resize(),scope.$apply()}),scope.$watch(function(){return $elem.width()},resize),$elem.bind("$destroy",function(){try{this.$preview.remove(),controller.destroy()}catch(e){}}),controller.init($elem,$preview),controller.redraw(),$timeout(function(){controller.floatItemsUp(),$elem.addClass("gridster-loaded")},100)}}}}}]).controller("GridsterItemCtrl",function(){return{$element:null,gridster:null,dragging:!1,resizing:!1,row:null,col:null,sizeX:null,sizeY:null,init:function($element,gridster){this.$element=$element,this.gridster=gridster,this.sizeX=gridster.opts.defaultSizeX,this.sizeY=gridster.opts.defaultSizeY},destroy:function(){this.gridster=null,this.$element=null},toJSON:function(){return{row:this.row,col:this.col,sizeY:this.sizeY,sizeX:this.sizeX}},setPosition:function(row,column){this.gridster.putItem(this,row,column),this.gridster.floatItemsUp(),this.gridster.updateHeight(this.dragging?this.sizeY:0),this.dragging?this.gridster.setElementPosition(this.gridster.$preview,this.row,this.col):this.gridster.setElementPosition(this.$element,this.row,this.col)},setSize:function(key,value){key=key.toUpperCase();var camelCase="size"+key,titleCase="Size"+key;if(""!==value){value=parseInt(value,10),(isNaN(value)||0===value)&&(value=this.gridster.opts["default"+titleCase]);var changed=!(this[camelCase]===value&&this["old"+titleCase]&&this["old"+titleCase]===value);this["old"+titleCase]=this[camelCase]=value,this.resizing?(this.gridster.setElementPosition(this.gridster.$preview,this.row,this.col),this.gridster["setElement"+titleCase](this.gridster.$preview,value)):this.gridster["setElement"+titleCase](this.$element,value),changed&&(this.gridster.moveOverlappingItems(this),this.gridster.floatItemsUp(),this.gridster.updateHeight(this.dragging?this.sizeY:0))}},setSizeY:function(rows){this.setSize("y",rows)},setSizeX:function(columns){this.setSize("x",columns)}}}).directive("gridsterItem",["$parse","$controller","$timeout",function($parse,$controller,$timeout){return{restrict:"EAC",require:"^gridster",link:function(scope,$el,attrs,gridster){function setDraggable(enable){if(draggablePossible)if(enable)$el.draggable({handle:gridster.opts.draggable&&gridster.opts.draggable.handle?gridster.opts.draggable.handle:null,refreshPositions:!0,start:function(e,widget){$el.addClass("gridster-item-moving"),item.dragging=!0,gridster.$preview.show(),gridster.setElementSizeX(gridster.$preview,item.sizeX),gridster.setElementSizeY(gridster.$preview,item.sizeY),gridster.setElementPosition(gridster.$preview,item.row,item.col),gridster.updateHeight(item.sizeY),scope.$apply(),gridster.opts.draggable&&gridster.opts.draggable.start&&(gridster.opts.draggable.start(e,widget,$el),scope.$apply())},drag:function(e,widget){item.row=gridster.pixelsToRows(widget.position.top),item.col=gridster.pixelsToColumns(widget.position.left),scope.$apply(),gridster.opts.draggable&&gridster.opts.draggable.drag&&(gridster.opts.draggable.drag(e,widget,$el),scope.$apply())},stop:function(e,widget){$el.removeClass("gridster-item-moving"),item.row=gridster.pixelsToRows(widget.position.top),item.col=gridster.pixelsToColumns(widget.position.left),item.dragging=!1,gridster.$preview.hide(),item.setPosition(item.row,item.col),gridster.updateHeight(),scope.$apply(),gridster.opts.draggable&&gridster.opts.draggable.stop&&(gridster.opts.draggable.stop(e,widget,$el),scope.$apply())}});else try{$el.draggable("destroy")}catch(e){}}function updateResizableDimensions(enabled){resizablePossible&&enabled&&($el.resizable("option","minHeight",(gridster.minRows?gridster.minRows:1)*gridster.rowHeight-gridster.margins[0]),$el.resizable("option","maxHeight",(gridster.maxRows?gridster.maxRows:gridster.maxGridRows)*gridster.rowHeight-gridster.margins[0]),$el.resizable("option","minWidth",(gridster.minColumns?gridster.minColumns:1)*gridster.colWidth-gridster.margins[1]),$el.resizable("option","maxWidth",(gridster.maxColumns?gridster.maxColumns:gridster.columns)*gridster.colWidth-gridster.margins[1]))}function setResizable(enable){if(resizablePossible)if(enable)$el.resizable({autoHide:!0,handles:"n, e, s, w, ne, se, sw, nw",minHeight:(gridster.minRows?gridster.minRows:1)*gridster.rowHeight-gridster.margins[0],maxHeight:(gridster.maxRows?gridster.maxRows:gridster.maxGridRows)*gridster.rowHeight-gridster.margins[0],minWidth:(gridster.minColumns?gridster.minColumns:1)*gridster.colWidth-gridster.margins[1],maxWidth:(gridster.maxColumns?gridster.maxColumns:gridster.columns)*gridster.colWidth-gridster.margins[1],start:function(e,widget){$el.addClass("gridster-item-moving"),item.resizing=!0,item.dragging=!0,gridster.$preview.fadeIn(300),gridster.setElementSizeX(gridster.$preview,item.sizeX),gridster.setElementSizeY(gridster.$preview,item.sizeY),scope.$apply(),gridster.opts.resizable&&gridster.opts.resizable.start&&(gridster.opts.resizable.start(e,widget,$el),scope.$apply())},resize:function(e,widget){item.row=gridster.pixelsToRows(widget.position.top,!1),item.col=gridster.pixelsToColumns(widget.position.left,!1),item.sizeX=gridster.pixelsToColumns(widget.size.width,!0),item.sizeY=gridster.pixelsToRows(widget.size.height,!0),scope.$apply(),gridster.opts.resizable&&gridster.opts.resizable.resize&&(gridster.opts.resizable.resize(e,widget,$el),scope.$apply())},stop:function(e,widget){$el.removeClass("gridster-item-moving"),item.row=gridster.pixelsToRows(widget.position.top,!1),item.col=gridster.pixelsToColumns(widget.position.left,!1),item.sizeX=gridster.pixelsToColumns(widget.size.width,!0),item.sizeY=gridster.pixelsToRows(widget.size.height,!0),item.resizing=!1,item.dragging=!1,gridster.$preview.fadeOut(300),item.setPosition(item.row,item.col),item.setSizeY(item.sizeY),item.setSizeX(item.sizeX),scope.$apply(),gridster.opts.resizable&&gridster.opts.resizable.stop&&(gridster.opts.resizable.stop(e,widget,$el),scope.$apply())}});else try{$el.resizable("destroy")}catch(e){}}function positionChanged(){item.setPosition(item.row,item.col),$getters.row&&$getters.row.assign&&$getters.row.assign(scope,item.row),$getters.col&&$getters.col.assign&&$getters.col.assign(scope,item.col)}var opts,optsKey=attrs.gridsterItem,item=$controller("GridsterItemCtrl"),draggablePossible="function"==typeof $el.draggable,resizablePossible="function"==typeof $el.resizable;if(optsKey){var $optsGetter=$parse(optsKey);opts=$optsGetter(scope)||{},!opts&&$optsGetter.assign&&(opts={row:item.row,col:item.col,sizeX:item.sizeX,sizeY:item.sizeY},$optsGetter.assign(scope,opts))}else opts=attrs;item.init($el,gridster),$el.addClass("gridster-item"),$el.addClass("gridster-item-moving");for(var aspects=["sizeX","sizeY","row","col"],$getters={},aspectFn=function(aspect){var key;if("string"==typeof opts[aspect])key=opts[aspect];else if("string"==typeof opts[aspect.toLowerCase()])key=opts[aspect.toLowerCase()];else{if(!optsKey)return;key=$parse(optsKey+"."+aspect)}$getters[aspect]=$parse(key),scope.$watch(key,function(newVal){newVal=parseInt(newVal,10),isNaN(newVal)||(item[aspect]=newVal)});var val=$getters[aspect](scope);"number"==typeof val&&(item[aspect]=val)},i=0,l=aspects.length;l>i;++i)aspectFn(aspects[i]);return scope.$watch(function(){return item.row},positionChanged),scope.$watch(function(){return item.col},positionChanged),scope.$on("draggable-changed",function(event,draggable){setDraggable(draggable.enabled)}),scope.$on("resizable-changed",function(event,resizable){setResizable(resizable.enabled)}),scope.$on("gridster-resized",function(){updateResizableDimensions("undefined"!=typeof gridster.opts.resizable&&"undefined"!=typeof gridster.opts.resizable.enabled&&gridster.opts.resizable.enabled)}),setDraggable("undefined"!=typeof gridster.opts.draggable&&"undefined"!=typeof gridster.opts.draggable.enabled&&gridster.opts.draggable.enabled),setResizable("undefined"!=typeof gridster.opts.resizable&&"undefined"!=typeof gridster.opts.resizable.enabled&&gridster.opts.resizable.enabled),scope.$watch(function(){return item.sizeY},function(sizeY){item.setSizeY(sizeY),$getters.sizeY&&$getters.sizeY.assign&&$getters.sizeY.assign(scope,item.sizeY)}),scope.$watch(function(){return item.sizeX},function(sizeX){item.setSizeX(sizeX),$getters.sizeX&&$getters.sizeX.assign&&$getters.sizeX.assign(scope,item.sizeX)}),$timeout(function(){$el.removeClass("gridster-item-moving")},100),$el.bind("$destroy",function(){try{gridster.removeItem(item)}catch(e){}try{item.destroy()}catch(e){}try{$el.draggable("destroy")}catch(e){}try{$el.resizable("destroy")}catch(e){}})}}}]);